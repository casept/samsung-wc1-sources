<?xml version='1.0'?> <!--*-nxml-*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!--
This file is part of systemd.

Copyright 2014 Lennart Poettering

systemd is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or
(at your option) any later version.

systemd is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with systemd; If not, see <http://www.gnu.org/licenses/>.
-->

<refentry id="sd_event_new" conditional="ENABLE_KDBUS">

  <refentryinfo>
    <title>sd_event_new</title>
    <productname>systemd</productname>

    <authorgroup>
      <author>
        <contrib>Developer</contrib>
        <firstname>Lennart</firstname>
        <surname>Poettering</surname>
        <email>lennart@poettering.net</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sd_event_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>sd_event_new</refname>
    <refname>sd_event_default</refname>
    <refname>sd_event_ref</refname>
    <refname>sd_event_unref</refname>

    <refpurpose>Acquire and release an event loop object</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;systemd/sd-bus.h&gt;</funcsynopsisinfo>

      <funcprototype>
        <funcdef>int <function>sd_event_new</function></funcdef>
        <paramdef>sd_bus **<parameter>event</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_event_default</function></funcdef>
        <paramdef>sd_bus **<parameter>event</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_event_ref</function></funcdef>
        <paramdef>sd_bus *<parameter>event</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_event_unref</function></funcdef>
        <paramdef>sd_bus *<parameter>event</parameter></paramdef>
      </funcprototype>

    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para><function>sd_event_new()</function> allocates a new event
    loop object. The event loop object is returned in the
    <parameter>event</parameter> parameter. After use, drop
    the returned reference with
    <function>sd_event_unref()</function>. When the last reference is
    dropped, the event loop is freed.</para>

    <para><function>sd_event_default()</function> acquires a reference
    to the default event loop object of the calling thread, possibly
    allocating a new object if no default event loop object has been
    allocated yet for the thread. After use, drop the returned
    reference with <function>sd_event_unref()</function>. When the
    last reference is dropped, the event loop is freed. If this
    function is called while the object returned from a previous call
    from the same thread is still referenced, the same object is
    returned again, but the reference is increased by one. It is
    recommended to use this call instead of
    <function>sd_event_new()</function> in order to share event loop
    objects between various components that are dispatched in the same
    thread. All threads either have exactly zero or one default event loop
    associated, but never more.</para>

    <para><function>sd_event_ref()</function> increases the reference
    counter of the specified event loop object by one.</para>

    <para><function>sd_event_unref()</function> decreases the
    reference counter of the specified event loop object by one. If
    the counter hits zero, the event loop object is freed. Note that it
    is freed regardless of whether it is the default event loop object for a
    thread or not. This means that allocating an event loop with
    <function>sd_event_default()</function>, then releasing it, and
    then acquiring a new one with
    <function>sd_event_default()</function> will result in two
    distinct objects. Note that, in order to free an event loop object,
    all remaining event sources of the event loop also need to be
    freed as they each keep a reference to it.</para>
  </refsect1>

  <refsect1>
    <title>Return Value</title>

    <para>On success, <function>sd_event_new()</function> and
    <function>sd_event_default()</function> return 0 or a positive
    integer. On failure, they return a negative errno-style error
    code. <function>sd_event_ref()</function> always returns a pointer
    to the event loop object passed
    in. <function>sd_event_unref()</function> always returns
    NULL.</para>
  </refsect1>

  <refsect1>
    <title>Errors</title>

    <para>Returned errors may indicate the following problems:</para>

    <variablelist>
      <varlistentry>
        <term><varname>-ENOMEM</varname></term>

        <listitem><para>Not enough memory to allocate object</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>-EMFILE</varname></term>

        <listitem><para>The maximum number of event loops has been allocated.</para></listitem>

      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>

    <para><function>sd_event_new()</function> and the other functions
    described here are available as a shared library, which can be
    compiled and linked to with the
    <constant>libsystemd</constant>Â <citerefentry project='die-net'><refentrytitle>pkg-config</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    file.</para>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <para>
      <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd-event</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_io</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_time</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_signal</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_child</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_defer</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_post</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_event_add_exit</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    </para>
  </refsect1>

</refentry>
