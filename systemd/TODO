Bugfixes:
* Re-enable "fsck -l" when it is ready:
   https://bugs.freedesktop.org/show_bug.cgi?id=79576#c5

* Should systemctl status \* work on all unit types, not just .service?

* Dangling symlinks of .automount unit files in .wants/ directories, set up
  automount points even when the original .automount file did not exist
  anymore. Only the .mount unit was still around.

* properly handle .mount unit state tracking when two mount points are stacked one on top of another on the exact same mount point.

External:
* Fedora: when installing fedora with yum --installroot /var/run is a directory, not a symlink
   https://bugzilla.redhat.com/show_bug.cgi?id=975864

* Fedora: add an rpmlint check that verifies that all unit files in the RPM are listed in %systemd_post macros.

* Fedora: post FPC ticket to move add %tmpfiles_create to the packaging guidelines

* Fedora: move kernel image to /usr/lib/modules/, kernel-install will take care of populating /boot

* Fedora: remove /etc/resolv.conf tmpfiles hack

Features:

* journald: make use of uid-range.h to managed uid ranges to split
  journals in.

* tmpfiles: port to unquote_many_words(), similar to sysusers

* unquote_many_words() should probably be used by a lot of code that
  currently uses FOREACH_WORD and friends. For example, most conf
  parsing callbacks should use it.

* logind: make the Suspend()/Hibernate() bus calls wait for the for
  the job to be completed. before returning, so that clients can wait
  for "systemctl suspend" to finish to know when the suspending is
  complete.

* sd_notify("SHUTDOWN=1") to fix a dbus activation race.
  http://lists.freedesktop.org/archives/systemd-devel/2014-July/020983.html

* merge ~/.local/share and ~/.local/lib into one similar /usr/lib and /usr/share....

* make "systemctl suspend" block until we are back from suspend

* remove readahead in 217

* journald: allows specification of UID range for splitting up journal files

* systemd.show_status= should probably have a mode where only failed
  units are shown.

* sd-event:
  - make it possible to embedd our event loop into foreign event loops
    by passing out the epoll fd and providing three functions that fit
    into GSource nicely.

* networkd:
  - add LLDP client side support
  - ipv4ll with multiple interfaces doesn't work when both dhcp and
    ipv4ll is used. for some reasons the kernel will currently pick an
    ipv4ll source address to reach non-ipv4ll gateways.
  - dhcp and ipv4ll should probably be skipped for "lo" devices, even
    if the user has a catchall .network file installed, that might
    theoretically match it.
  - we probably should introduce a new operational state that
    indicates that we are trying to acquire some configuration for a
    link but haven't acquired any yet. Just to inform the admin that
    networkd cares about an interface, but is still in progress..
  - the DHCP lease data (such as NTP/DNS) is still made available when
    a carrier is lost on a link. It should be removed instantly.
  - .network setting that allows overriding of the hostname to send to the dhcp server
    http://lists.freedesktop.org/archives/systemd-devel/2014-July/021550.html
  - add per-network Domains= settings, with a special syntax Domains=*
    for routing all non-otherwise routed traffic to this link
  - add UseDomains= setting to [DHCP] to add dhcp supplied domains to
    per-interface Domains= list.
  - expose in the API the following bits:
        - option 15, domain name and/or option 119, search list
        - option 12, host name and/or option 81, fqdn
        - option 100, 101, timezone
        - option 123, 144, geolocation
        - option 252, configure http proxy (PAC/wpad)
  - networkd's dhcp server should transparently pass on the DNS and
    NTP server list it got from user configuration and its dhcp client
    to clients. It should also pass on its own timezone information.
  - provide a way to define a per-network interface default metric value
    for all routes to it. possibly a second default for DHCP routes.

* resolved:
  - put networkd events and rtnl events at a higher priority, so that
    we always process them before we process client requests
  - DNSSEC
        - use base64 for key presentation?
        - add display of private key types (http://tools.ietf.org/html/rfc4034#appendix-A.1.1)?
        - add nice formatting of DNS timestamps
  - DNS
        - search paths
  - mDNS/DNS-SD
        - avahi compat
  - DNS-SD service registration from socket units
  - edns0
  - dname
  - cname on PTR (?)

* Ignore .busname units on classic D-Bus boots, systemd-resolved cannot be started on kdbus
  without the active policy and should get a Wants=org.freedesktop.resolve1.busname to
  pull-in the policy.

* Allow multiple ExecStart= for all Type= settings, so that we can cover rescue.service nicely

* the resolv.conf tmpfiles line should be covered by ENABLE_NETWORKD...

* Add a new verb "systemctl top"

* logind: allow users to kill or lock their own sessions

* add new gpt type for btrfs volumes

* support empty /etc boots nicely:
  - nspawn/gpt-generator: introduce new gpt partition type for /usr
  - fstab-generator: support systemd.volatile=yes|no|state on the kernel cmdline, too, similar to nspawn's --volatile=
  - fstab-generator: add support for usr= in addition to root= on the kernel cmdline

* generator that automatically discovers btrfs subvolumes, identifies their purpose based on some xattr on them.

* support setting empty environment variables with Environment= and EnvironmentFile=

* timer units: actually add extra delays to timer units with high AccuracySec values, don't start them already when we are awake...

* a way for container managers to turn off getty starting via $container_headless= or so...

* figure out a nice way how we can let the admin know what child/sibling unit causes cgroup membership for a specific unit

* journalctl: add the ability to look for the most recent process of a binary. journalctl /usr/bin/X11 --pid=-1 or so...

* set NOTIFY_SOCKET also for control processes

* mount_cgroup_controllers(): symlinks need to get the label applied

* For timer units: add some mechanisms so that timer units that trigger immediately on boot do not have the services
  they run added to the initial transaction and thus confuse Type=idle.

* Add timeout to early-boot, and shut down the system if it is hit. Solves the laptop-in-bag problem and is useful for embedded cases

* Run most system services with cgroupfs read-only and procfs with a more secure mode (doesn't work, since the hidepid= option is per-pid-namespace, not per-mount)

* sd-event: generate a failure of a default event loop is executed out-of-thread

* expose "Locked" property on logind sesison objects

* add bus api to query unit file's X fields.

* consider adding RuntimeDirectoryUser= + RuntimeDirectoryGroup=

* sd-event: define more intervals where we will shift wakeup intervals around in, 1h, 6h, 24h, ...

* gpt-auto-generator:
  - Support LUKS for root devices
  - Define new partition type for encrypted swap? Support probed LUKS for encrypted swap?
  - Make /home automount rather than mount?

* improve journalctl performance by loading journal files
  lazily. Encode just enough information in the file name, so that we
  do not have to open it to know that it is not interesting for us, for
  the most common operations.

* add generator that pulls in systemd-network from containers when
  CAP_NET_ADMIN is set, more than the loopback device is defined, even
  when it is otherwise off

* MessageQueueMessageSize= and RLimitFSIZE= (and suchlike) should use parse_iec_size().

* "busctl status" works only as root on dbus1, since we cannot read
  /proc/$PID/exe

* implement Distribute= in socket units to allow running multiple
  service instances processing the listening socket, and open this up
  for ReusePort=

* socket units: support creating sockets in different namespace,
  opening it up for JoinsNamespaceOf=. This would require to fork off
  a tiny process that joins the namespace and creates/binds the socket
  and passes this back to PID1 via SCM_RIGHTS. This also could be used
  to allow Chown/chgrp on sockets without requiring NSS in PID 1.

* New service property: maximum CPU and wallclock runtime for a service

* introduce bus call FreezeUnit(s, b), as well as "systemctl freeze
  $UNIT" and "systemctl thaw $UNIT" as wrappers around this. The calls
  should SIGSTOP all unit processes in a loop until all processes of
  it are fully stopped. This can later be used for app management by
  desktop UIs such as gnome-shell to freeze apps that are not visible
  on screen, not unlike how job control works on the shell

* completions:
 - manager property enumeration was broken when systemd moved to /usr/lib/

* cgroups:
  - implement per-slice CPUFairScheduling=1 switch
  - handle jointly mounted controllers correctly
  - introduce high-level settings for RT budget, swappiness
  - how to reset dynamically changed unit cgroup attributes sanely?
  - when reloading configuration, apply new cgroup configuration
  - when recursively showing the cgroup hierarchy, optionally also show
    the hierarchies of child processes

* transient units:
  - allow creating auxiliary units with the same call
  - add field to transient units that indicate whether systemd or somebody else saves/restores its settings, for integration with libvirt
  - ensure scope units may be started only a single time

* Automatically configure swap partition to use for hibernation by looking for largest swap partition on the root disk?

* when we detect low battery and no AC on boot, show pretty splash and refuse boot

* machined, localed: when we try to kill an empty cgroup, generate an ESRCH error over the bus

* libsystemd-journal, libsystemd-login, libudev: add calls to easily attach these objects to sd-event event loops

* be more careful what we export on the bus as (usec_t) 0 and (usec_t) -1

* unify dispatch table in systemctl_main() and friends

* rfkill,backlight: we probably should run the load tools inside of the udev rules so that the state is properly initialized by the time other software sees it

* After coming back from hibernation reset hibernation swap partition using the /dev/snapshot ioctl APIs

* If we try to find a unit via a dangling symlink, generate a clean
  error. Currently, we just ignore it and read the unit from the search
  path anyway.

* refuse boot if /etc/os-release is missing or /etc/machine-id cannot be set up

* given that logind now lets PID 1 do all nasty work, we can
  probably reduce the capability set it retains substantially.
  (we need CAP_SYS_ADMIN for drmSetMaster(), so maybe not worth it)

* btrfs raid assembly: some .device jobs stay stuck in the queue

* make sure gdm does not use multi-user-x but the new default X configuration file, and then remove multi-user-x from systemd

* man: the documentation of Restart= currently is very misleading and suggests the tools from ExecStartPre= might get restarted.

* load .d/*.conf dropins for device units

* allow implementation of InaccessibleDirectories=/ plus
  ReadOnlyDirectories=... for whitelisting files for a service.

* sd-bus:
  - when kdbus does not take our message without memfds, try again with memfds
  - systemd-bus-proxyd needs to enforce good old XML policy
  - allow updating attach flags during runtime
  - pid1: peek into activating message when activating a service
  - introduce sd_bus_emit_object_added()/sd_bus_emit_object_removed() that automatically includes the build-in interfaces in the list
  - port to sd-resolve for connecting to TCP dbus servers
  - see if we can drop more message validation on the sending side
  - add API to clone sd_bus_message objects
  - make AddMatch calls on dbus1 transports async?
  - kdbus: matches against source or destination pids for an "strace -p"-like feel. Problem: The PID info needs to be available in userspace too...
  - longer term: priority inheritance
  - dbus spec updates:
       - kdbus mapping
       - NameLost/NameAcquired obsolete
       - GVariant
       - "const" properties (posted)
       - path escaping
  - update systemd.special(7) to mention that dbus.socket is only about the compatibility socket now
  - test bloom filter generation indexes

* sd-event
  - allow multiple signal handlers per signal?

* in the final killing spree, detect processes from the root directory, and
  complain loudly if they have argv[0][0] == '@' set.
  https://bugzilla.redhat.com/show_bug.cgi?id=961044

* investigate endianness issues of UUID vs. GUID

* dbus: when a unit failed to load (i.e. is in UNIT_ERROR state), we
  should be able to safely try another attempt when the bus call LoadUnit() is invoked.

* add a pam module that passes the hdd passphrase into the PAM stack and then expires it, for usage by gdm auto-login.

* add a pam module that on password changes updates any LUKS slot where the password matches

* maybe add a generator that looks for "systemd.run=" on the kernel cmdline for container usercases...

* timedatectl: print a nicer message when enabling ntp fails because ntpd/chrony are not installed

* cgtop: make cgtop useful in a container

* test/:
  - add 'set -e' to scripts in test/
  - make stuff in test/ work with separate output dir

* seems that when we follow symlinks to units we prefer the symlink
  destination path over /etc and /usr. We should not do that. Instead
  /etc should always override /run+/usr and also any symlink
  destination.

* when isolating, try to figure out a way how we implicitly can order
  all units we stop before the isolating unit...

* teach ConditionKernelCommandLine= globs or regexes (in order to match foobar={no,0,off})

* after all byte-wise realloc() is slow, even on glibc, so i guess we
  need manual exponential loops after all

* BootLoaderSpec: Clarify that the kernel has to be in $BOOT. Clarify
  that the boot loader should be installed to the ESP. Define a way
  how an installer can figure out whether a BLS compliant boot loader
  is installed.

* think about requeuing jobs when daemon-reload is issued? usecase:
  the initrd issues a reload after fstab from the host is accessible
  and we might want to requeue the mounts local-fs acquired through
  that automatically.

* systemd-inhibit: make taking delay locks useful: support sending SIGINT or SIGTERM on PrepareForSleep()

* journal-or-kmsg is currently broken? See reverted commit 4a01181e460686d8b4a543b1dfa7f77c9e3c5ab8.

* remove any syslog support from log.c -- we probably cannot do this before split-off udev is gone for good

* shutdown logging: store to EFI var, and store to USB stick?

* write UI tool that pops up emergency messages from the journal as notification

* think about window-manager-run-as-user-service problem: exit 0 → activate shutdown.target; exit != 0 → restart service

* use "log level" rather than "log priority" everywhere

* merge unit_kill_common() and unit_kill_context()

* introduce ExecCondition= in services

* EFI:
  - honor language efi variables for default language selection (if there are any?)
  - honor timezone efi variables for default timezone selection (if there are any?)
  - change bootctl to be backed by systemd-bootd to control temporary and persistent default boot goal plus efi variables

* maybe do not install getty@tty1.service symlink in /etc but in /usr?

* re-enable "make check" for gtk-doc (broken for unknown reason)

* fstab: add new mount option x-systemd-after=/foobar/waldo to allow manual dependencies to other mount points
  https://bugzilla.redhat.com/show_bug.cgi?id=812826

* print a nicer explanation if people use variable/specifier expansion in ExecStart= for the first word

* mount: turn dependency information from /proc/self/mountinfo into dependency information between systemd units.

* logind:
  - logind: optionally, ignore idle-hint logic for autosuspend, block suspend as long as a session is around
  - When we update the kernel all kind of hibernation should be prohibited until shutdown/reboot
  - logind: wakelock/opportunistic suspend support
  - Add pretty name for seats in logind
  - logind: allow showing logout dialog from system?
  - we should probably handle SIGTERM/SIGINT to not leave dot files around, just in case
  - session scopes/user unit: add RequiresMountsFor for the home directory of the user
  - add Suspend() bus calls which take timestamps to fix double suspend issues when somebody hits suspend and closes laptop quickly.
  - if pam_systemd is invoked by su from a process that is outside of a
    any session we should probably just become a NOP, since that's
    usually not a real user session but just some system code that just
    needs setuid().

* exec: when deinitializating a tty device fix the perms and group, too, not only when initializing. Set access mode/gid to 0620/tty.

* service: watchdog logic: for testing purposes allow ping, but do not require pong

* journal:
  - import and delete pstore filesystem content at startup
  - journald: also get thread ID from client, plus thread name
  - journal: when waiting for journal additions in the client always sleep at least 1s or so, in order to minimize wakeups
  - add API to close/reopen/get fd for journal client fd in libsystemd-journal.
  - fallback to /dev/log based logging in libsystemd-journal, if we cannot log natively?
  - declare the local journal protocol stable in the wiki interface chart
  - journal: reuse XZ context
  - sd-journal: speed up sd_journal_get_data() with transparent hash table in bg
  - journald: when dropping msgs due to ratelimit make sure to write
    "dropped %u messages" not only when we are about to print the next
    message that works, but alraedy after a short tiemout
  - check if we can make journalctl by default use --follow mode inside of less if called without args?
  - maybe add API to send pairs of iovecs via sd_journal_send
  - journal: when writing journal auto-rotate if time jumps backwards
  - journal: add a setgid "systemd-journal" utility to invoke from libsystemd-journal, which passes fds via STDOUT and does PK access
  - journactl: support negative filtering, i.e. FOOBAR!="waldo",
    and !FOOBAR for events without FOOBAR.
  - journal: send out marker messages every now and then, and immediately sync with fdatasync() afterwards, in order to have hourly guaranteed syncs.
  - journal-send.c, log.c: when the log socket is clogged, and we drop, count this and write a message about this when it gets unclogged again.
  - journal: find a way to allow dropping history early, based on priority, other rules
  - journal: When used on NFS, check payload hashes
  - journald: check whether it is OK if the client can still modify delivered journal entries
  - journal live copy, based on libneon (client) and libmicrohttpd (server)
  - journald: add kernel cmdline option to disable ratelimiting for debug purposes
  - refuse taking lower-case variable names in sd_journal_send() and friends.
  - journald: we currently rotate only after MaxUse+MaxFilesize has been reached.
  - journal: deal nicely with byte-by-byte copied files, especially regards header
  - journal: store euid in journal if it differs from uid
  - journal: sanely deal with entries which are larger than the individual file size, but where the components would fit
  - Replace utmp, wtmp, btmp, and lastlog completely with journal
  - journalctl: instead --after-cursor= maybe have a --cursor=XYZ+1 syntax?
  - tmpfiles: when applying ownership to /run/log/journal, also do this for the journal fails contained in it
  - when a kernel driver logs in a tight loop, we should ratelimit that too.
  - journald: optionally, log debug messages to /run but everything else to /var
  - journald: when we drop syslog messages because the syslog socket is
    full, make sure to write how many messages are lost as first thing
    to syslog when it works again.
  - journald: make sure ratelimit is actually really per-service with the new cgroup changes
  - change systemd-journal-flush into a service that stays around during
    boot, and causes the journal to be moved back to /run on shutdown,
    so that we do not keep /var busy. This needs to happen synchronously,
    hence doing this via signals is not going to work.

* document:
  - document that deps in [Unit] sections ignore Alias= fields in
    [Install] units of other units, unless those units are disabled
  - man: clarify that time-sync.target is not only sysv compat but also useful otherwise. Same for similar targets
  - document the exit codes when services fail before they are exec()ed
  - document that service reload may be implemented as service reexec
  - document in wiki how to map ical recurrence events to systemd timer unit calendar specifications
  - add a man page containing packaging guidelines and recommending usage of things like Documentation=, PrivateTmp=, PrivateNetwork= and ReadOnlyDirectories=/etc /usr.
  - document systemd-journal-flush.service properly
  - documentation: recommend to connect the timer units of a service to the service via Also= in [Install]
  - man: document the very specific env the shutdown drop-in tools live in
  - man: extend runlevel(8) to mention that runlevels suck, and are dead. Maybe add runlevel(7) with a note about that too
  - man: add more examples to man pages
  - man: maybe sort directives in man pages, and take sections from --help and apply them to man too

* systemctl:
  - systemctl list-jobs - show dependencies
  - add systemctl switch to dump transaction without executing it
  - Add a verbose mode to "systemctl start" and friends that explains what is being done or not done
  - "systemctl disable" on a static unit prints no message and does
    nothing. "systemctl enable" does nothing, and gives a bad message
    about it. Should fix both to print nice actionable messages.
  - print nice message from systemctl --failed if there are no entries shown, and hook that into ExecStartPre of rescue.service/emergency.service
  - add new command to systemctl: "systemctl system-reexec" which reexecs as many daemons as virtually possible
  - systemctl enable: fail if target to alias into does not exist? maybe show how many units are enabled afterwards?
  - systemctl: "Journal has been rotated since unit was started." message is misleading
  - support "systemctl stop foobar@.service" to stop all units matching a certain template
  - Something is wrong with symlink handling of "autovt@.service" in "systemctl list-unit-files"
  - better error message if you run systemctl without systemd running
  - systemctl status output should should include list of triggering units and their status

* unit install:
  - "systemctl mask" should find all names by which a unit is accessible
    (i.e. by scanning for symlinks to it) and link them all to /dev/null
  - systemctl list-unit-files should list generated files (and probably with a new state "generated" for them, or so)
  - systemctl: maybe add "systemctl add-wants" or so...

* timer units:
  - timer units should get the ability to trigger when:
    o CLOCK_REALTIME makes jumps (TFD_TIMER_CANCEL_ON_SET)
    o DST changes
  - Support 2012-02~4 as syntax for specifying the fourth to last day of the month.
  - calendarspec: support value ranges with ".." notation. Example: 2013-4..8-1
  - when parsing calendar timestamps support the UTC timezone (even if we will not support arbitrary timezone specs, support UTC itself certainly makes sense), also support syntaxes such as +0200
  - Modulate timer frequency based on battery state

* update the kernel's TZ (sys_tz) when DST changes

* sync down the system time to the RTC when:
    - CLOCK_REALTIME makes jumps (the user explicitely requested a time set)
    - DST/timezone changes && ntp is active && RTC-in-localtime (never do it without ntp)
  This takes care of syncing ntpdate updates to the RTC, and DST updates for localtime
  mode, it will never touch the RTC if the no reliable time source is active or the
  user did not request anything like it.

* add libsystemd-password or so to query passwords during boot using the password agent logic

* If we show an error about a unit (such as not showing up) and it has no Description string, then show a description string generated form the reverse of unit_name_mangle().

* fedup: add --unit to systemctl switch-root somehow
* fedup: do not delete initrd on switch-root
* fedup: generator

* clean up date formatting and parsing so that all absolute/relative timestamps we format can also be parsed

* on shutdown: move utmp, wall, audit logic all into PID 1 (or logind?), get rid of systemd-update-utmp-runlevel

* make repeated alt-ctrl-del presses printing a dump, or even force a reboot without
  waiting for the timeout

* hostnamed: before returning information from /etc/machine-info.conf check the modification data and reread. Similar for localed, ...

* currently x-systemd.timeout is lost in the initrd, since crypttab is copied into dracut, but fstab is not

* nspawn:
  - bind mount read-only the cgroup tree higher than nspawn
  - refuses to boot containers without /etc/machine-id (OK?), and with empty /etc/machine-id (not OK).
  - support taking a btrfs snapshot at startup and dropping it afterwards

* cryptsetup:
  - cryptsetup-generator: allow specification of passwords in crypttab itself
  - move cryptsetup key caching into kernel keyctl?
    https://bugs.freedesktop.org/show_bug.cgi?id=54982
  - support rd.luks.allow-discards= kernel cmdline params in cryptsetup generator

* hw watchdog: optionally try to use the preset watchdog timeout instead of always overriding it
  https://bugs.freedesktop.org/show_bug.cgi?id=54712

* after deserializing sockets in socket.c we should reapply sockopts and things

* make timer units go away after they elapsed

* come up with a nice way to write queue/read_ahead_kb for a block device without interfering with readahead

* move PID 1 segfaults to /var/lib/systemd/coredump?

* create /sbin/init symlinks from the build system

* allow writing multiple conditions in unit files on one line

* MountFlags=shared acts as MountFlags=slave right now.

* drop PID 1 reloading, only do reexecing (difficult: Reload()
  currently is properly synchronous, Reexec() is weird, because we
  cannot delay the response properly until we are back, so instead of
  being properly synchronous we just keep open the fd and close it
  when done. That means clients do not get a successful method reply,
  but much rather a disconnect on success.

* properly handle loop back mounts via fstab, especially regards to fsck/passno

* allow services with no ExecStart= but with an ExecStop=

* dracut-shutdown needs to be ordered before unmounting /boot

* initialize the hostname from the fs label of /, if /etc/hostname does not exist?

* rename "userspace" to "core-os"

* load-fragment: when loading a unit file via a chain of symlinks
  verify that it is not masked via any of the names traversed.

* introduce Type=pid-file

* change Requires=basic.target to RequisiteOverride=basic.target

* when breaking cycles drop sysv services first, then services from /run, then from /etc, then from /usr

* automount: implement expire:
   - set superblock timeout AUTOFS_DEV_IOCTL_TIMEOUT_CMD
   - periodically run AUTOFS_DEV_IOCTL_EXPIRE_CMD
     - every timeout/4 (original autofs logic)
     - blocking, needs a thread
     - run until -EAGAIN
   - receive expire packet on pipe if kernel tells the timeout is over
     - call umount
     - answer expire packet on pipe with AUTOFS_DEV_IOCTL_{READY,FAIL}_CMD
   - AUTOFS_DEV_IOCTL_EXPIRE_CMD returns

* ExecOnFailure=/usr/bin/foo

* udev:
  - remove src/udev/udev-builtin-firmware.c (CONFIG_FW_LOADER_USER_HELPER=n)
  - move to LGPL
  - kill scsi_id
  - add trigger --subsystem-match=usb/usb_device device
  - reimport udev db after MOVE events for devices without dev_t

* when a service has the same env var set twice we actually store it twice and return that in systemctl show -p... We should only show the last setting

* introduce mix of BindTo and Requisite

* There's currently no way to cancel fsck (used to be possible via C-c or c on the console)

* add option to sockets to avoid activation. Instead just drop packets/connections, see http://cyberelk.net/tim/2012/02/15/portreserve-systemd-solution/

* default unix qlen is too small (10). bump sysctl? add sockopt?

* save coredump in Windows/Mozilla minidump format

* support crash reporting operation modes (https://live.gnome.org/GnomeOS/Design/Whiteboards/ProblemReporting)

* default to actual 32-bit PIDs, via /proc/sys/kernel/pid_max

* be able to specify a forced restart of service A where service B depends on, in case B
  needs to be auto-respawned?

* when a bus name of a service disappears from the bus make sure to queue further activation requests

* tmpfiles:
  - apply "x" on "D" too (see patch from William Douglas)

* for services: do not set $HOME in services unless requested

* hide PAM options in fragment parser when compile time disabled

* when we automatically restart a service, ensure we restart its rdeps, too.

* allow Type=simple with PIDFile=
  https://bugzilla.redhat.com/show_bug.cgi?id=723942

* move PAM code into its own binary

* implement Register= switch in .socket units to enable registration
  in Avahi, RPC and other socket registration services.

* make sure systemd-ask-password-wall does not shutdown systemd-ask-password-console too early

* support sd_notify() style notification when reload begins (RELOADING=1), reload is finished (READY=1), and add ReloadSignal= then to use in combination

* support sd_notify() style notification when shutting down, to make auto-exit bus services work (STOPPING=1)

* verify that the AF_UNIX sockets of a service in the fs still exist
  when we start a service in order to avoid confusion when a user
  assumes starting a service is enough to make it accessible

* Make it possible to set the keymap independently from the font on
  the kernel cmdline. Right now setting one resets also the other.

* and a dbus call to generate target from current state

* readahead:
  - drop /.readahead on bigger upgrades with yum
  - move readahead files into /var (look for them with .path units?)
  - readahead: use BTRFS_IOC_DEFRAG_RANGE instead of BTRFS_IOC_DEFRAG ioctl, with START_IO
  - readahead: when bumping /sys readahead variable save mtime and compare later to detect changes
  - readahead: make use of EXT4_IOC_MOVE_EXT, as used by http://e4rat.sourceforge.net/

* GC unreferenced jobs (such as .device jobs)

* write blog stories about:
  - hwdb: what belongs into it, lsusb
  - enabling dbus services
  - status update
  - how to make changes to sysctl and sysfs attributes
  - remote access
  - how to pass throw-away units to systemd, or dynamically change properties of existing units
  - how to integrate cgconfig and suchlike with systemd
  - testing with Harald's awesome test kit
  - auto-restart
  - how to develop against journal browsing APIs
  - the journal HTTP iface
  - non-cgroup resource management
  - dynamic resource management with cgroups
  - refreshed, longer missions statement
  - calendar time events
  - init=/bin/sh vs. "emergency" mode, vs. "rescue" mode, vs. "multi-user" mode, vs. "graphical" mode, and the debug shell
  - how to create your own target
  - instantiated apache, dovecot and so on
  - hooking a script into various stages of shutdown/rearly booot

* allow port=0 in .socket units

* recreate systemd's D-Bus private socket file on SIGUSR2

* Support --test based on current system state

* investigate whether the gnome pty helper should be moved into systemd, to provide cgroup support.

* maybe introduce ExecRestartPre=

* dot output for --test showing the 'initial transaction'

* fingerprint.target, wireless.target, gps.target, netdevice.target

* drop cap bounding set in readahead and other services

* systemd-python:
   - figure out a simple way to wait for journal events in a way that
     works with ^C
   - add documentation to systemd.daemon

* bootchart:
   - plot per-process IO utilization
   - group processes based on service association (cgroups)
   - document initcall_debug
   - kernel cmdline "bootchart" option for simplicity?

* udev-link-config:
   - Make sure ID_PATH is always exported and complete for
     network devices where possible, so we can safely rely
     on Path= matching
   - check MTUBytes parsing (expecting size_t but we are using unsigned)

* sd-rtnl:
   - add support for more attribute types
   - inbuilt piping support (essentially degenerate async)? see loopback-setup.c and other places

* networkd:
   - add more keys to [Route] and [Address] sections
   - add support for more DHCPv4 options (and, longer term, other kinds of dynamic config)
   - add proper initrd support (in particular generate .network/.link files based on /proc/cmdline)
   - add reduced [Link] support to .network files
   - add Scope= parsing option for [Network]
   - properly handle routerless dhcp leases
   - add more attribute support for SIT tunnel
   - work with non-ethernet devices
   - add support for more bond options

* networkd-wait-online:
   - make operstates to wait for configurable?

* dhcp:
   - figure out how much we can increase Maximum Message Size
   - export timezone information
   - support RFC4702 (pass FQDN)

* dhcp6:
   - add functions to set previously stored IPv6 addresses on startup and get
     them at shutdown; store them in client->ia_na
   - write more test cases
   - implement and do duplicate address detection, see rfc 4862, 5.4.
   - implement reconfigure support, see 5.3., 15.11. and 22.20.
   - implement information request, see 1.2. and 18.1.5.
   - implement support for temporary adressess (IA_TA)
   - implement elapsed time option
   - implement dhcpv6 authentication
   - investigate the usefulness of Confirm messages; i.e. are there any
     situations where the link changes without any loss in carrier detection
     or interface down
   - some servers don't do rapid commit without a filled in IA_NA, verify
     this behavior

External:

* dbus:
   - natively watch for dbus-*.service symlinks (PENDING)
   - teach dbus to activate all services it finds in /etc/systemd/services/org-*.service

* fix alsa mixer restore to not print error when no config is stored

* make cryptsetup lower --iter-time

* patch kernel for xattr support in /dev, /proc/, /sys?

* kernel: add device_type = "fb", "fbcon" to class "graphics"

* drop accountsservice's StandardOutput=syslog and Type=dbus fields

* dbus upstream still refers to dbus.target and should not

* dbus: in fedora, make /var/lib/dbus/machine-id a symlink to /etc/machine-id

* add "# export SYSTEMD_PAGER=" to bash login

* /usr/bin/service should actually show the new command line

* fedora: suggest auto-restart on failure, but not on success and not on coredump. also, ask people to think about changing the start limit logic. Also point people to RestartPreventExitStatus=, SuccessExitStatus=

* fedora: F20: go timer units all the way, leave cron.daily for cron

* neither pkexec nor sudo initialize environ[] from the PAM environment?

* fedora: update policy to declare access mode and ownership of unit files to root:root 0644, and add an rpmlint check for it

* register catalog database signature as file magic

* zsh shell completion: <command> <verb> -<TAB> should complete options, but currently
  does not

Regularly:

* look for close() vs. close_nointr() vs. close_nointr_nofail()

* check for strerror(r) instead of strerror(-r)

* Use PR_SET_PROCTITLE_AREA if it becomes available in the kernel

* pahole

* set_put(), hashmap_put() return values check. i.e. == 0 does not free()!

* use secure_getenv() instead of getenv() where appropriate

* link up selected blog stories from man pages and unit files Documentation= fields

Scheduled for removal or fixing:

* xxxOverridable dependencies (probably: fix)
