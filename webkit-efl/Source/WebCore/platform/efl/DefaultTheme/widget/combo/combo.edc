/*
    Copyright (C) 2008,2009 INdT - Instituto Nokia de Tecnologia
    Copyright (C) 2009,2010 ProFUSION embedded systems
    Copyright (C) 2009,2010 Samsung Electronics

    This file is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

group { name: "webkit/widget/combo";
   data { item: "scale" "2"; } /* original combo_size is 64, 29 , original combo_button size is 31,29 */

    images {
        image: "widget/combo/00_combo_normal.png" COMP;
        image: "widget/combo/00_combo_normal_button.png" COMP;
        image: "widget/combo/00_combo_focus.png" COMP;
        image: "widget/combo/00_combo_focus_button.png" COMP;
        image: "widget/combo/00_combo_press.png" COMP;
        image: "widget/combo/00_combo_press_button.png" COMP;
        image: "widget/combo/00_combo_border.png" COMP;
        image: "widget/combo/00_combo_focus_border.png" COMP;
        image: "widget/combo/00_icon.png" COMP;
    }

    script {
        public isEnabled;
        public isPressed;
        public isFocused;
        public isStyled;

        public show() {
            if (get_int(isEnabled) == 1) {
                if (get_int(isFocused) == 1) {
                    if (get_int(isPressed) == 1) {
                        set_state(PART:"combo", "pressed", 0.0);
                        set_state(PART:"combo_button", "pressed", 0.0);
                    }
                    else if (get_int(isStyled) == 1) {
                        set_state(PART:"combo", "styled_focused", 0.0);
                        set_state(PART:"combo_button", "focused", 0.0);
                    }
                    else {
                        set_state(PART:"combo", "focused", 0.0);
                        set_state(PART:"combo_button", "focused", 0.0);
                    }
                }
                else if (get_int(isStyled) == 1) {
                    set_state(PART:"combo", "styled", 0.0);
                    set_state(PART:"combo_button", "default", 0.0);
                }
                else {
                    set_state(PART:"combo", "default", 0.0);
                    set_state(PART:"combo_button", "default", 0.0);
                }
                
                set_state(PART:"combo_button_icon", "default", 0.0);
            }
            else {
                set_state(PART:"combo", "disabled", 0.0);
                set_state(PART:"combo_button", "disabled", 0.0);
                set_state(PART:"combo_button_icon", "disabled", 0.0);
            }
        }
    }

    parts {
        part {
            name: "clipper";
            type: RECT;
            description {
                state: "default" 0.0;
            }
        }
        part { name: "bt_combo_clipper";
            type: RECT;
            scale: 1;
            clip_to: "clipper";
            description {
                state: "default" 0.0;
                min: 33 1;
                max: 33 9999999;
                align: 1.0 0.5;
                rel1 {
                    to: "clipper";
                    relative: 1.0 0.0;
                }
                rel2 {
                    to: "clipper";
                    relative: 1.0 1.0;
                }
            }
        }


        part {
            name: "combo_clipper";
            type: RECT;
            clip_to: "clipper";
            description {
                state: "default" 0.0;
                rel1.to: "clipper";
                rel2 {
                    to: "bt_combo_clipper";
                    relative: 0.0 1.0;
                }
            }
        }

        part {
            name: "combo";
            type: IMAGE;
            clip_to: "combo_clipper";
            description {
                state: "default" 0.0;
                image {
                    normal: "widget/combo/00_combo_normal.png";
                    border: 15 0 15 15;
                }
            }
            description {
               state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 150;
            }
            description {
               state: "focused" 0.0;
               inherit: "default" 0.0;
               image {
                  normal: "widget/combo/00_combo_focus.png";
                  border: 15 0 15 15;
               }
            }
            description {
               state: "pressed" 0.0;
               inherit: "default" 0.0;
               image {
                  normal: "widget/combo/00_combo_press.png";
                  border: 15 0 15 15;
               }
            }
            description {
                state: "styled" 0.0;
                image {
                    normal: "widget/combo/00_combo_border.png";
                    border: 15 0 15 15;
                }
            }
            description {
                state: "styled_focused" 0.0;
                image {
                    normal: "widget/combo/00_combo_focus_border.png";
                    border: 15 0 15 15;
                }
            }
        }

        part {
            name: "combo_button";
            type: IMAGE;
            clip_to: "bt_combo_clipper";
            description {
                state: "default" 0.0;
                rel1.to: "bt_combo_clipper";
                image {
                     normal: "widget/combo/00_combo_normal_button.png";
                     border: 0 15 15 15;
               }
            }
            description {
                state: "disabled" 0.0;
                inherit: "default" 0.0;
                color: 255 255 255 150;
                rel1.to: "bt_combo_clipper";
            }
            description {
                state: "focused" 0.0;
                inherit: "default" 0.0;
                rel1.to: "bt_combo_clipper";
                image {
                    normal: "widget/combo/00_combo_focus_button.png";
                    border: 0 15 15 15;
                }
            }
            description {
                state: "pressed" 0.0;
                inherit: "default" 0.0;
                rel1.to: "bt_combo_clipper";
                image {
                    normal: "widget/combo/00_combo_press_button.png";
                    border: 0 15 15 15;
                }
            }
        }

        part {
            name: "combo_button_icon";
            type: IMAGE;
            clip_to: "bt_combo_clipper";
            scale: 1;
            description {
                state: "default" 0.0;
                min: 24 20;
                max: 24 20;
                color: 255 255 255 150;
                rel1 {
                    to: "bt_combo_clipper";
                    relative: 0.5 0.5;
                }
                rel2 {
                    to: "bt_combo_clipper";
                    relative: 0.5 0.5;
                }
                fixed: 1 1;
                image.normal: "widget/combo/00_icon.png";
            }
            description {
                state: "disabled" 0.0;
                inherit: "default" 0.0;
                color: 255 255 255 50;
            }
        }

        part {
            name: "text_confinement";
            type: RECT;
            description {
               state: "default" 0.0;
               color: 0 0 0 0;
               rel1.offset: 20 10;              
               rel2.offset: -38 -12;
            }
         }
    }

    programs {
        program {
            name: "enabled";
            signal: "enabled";
            script {
                set_int(isEnabled, 1);
                show();
            }
        }
        program {
            name: "pressed";
            signal: "pressed";
            script {
               set_int(isPressed, 1);
               show();
            }
        }
        program {
            name: "focused";
            signal: "focused";
            script {
                set_int(isFocused, 1);
                show();
            }
        }
        program {
            name: "styled_state";
            signal: "bg_styled";
            script {
                set_int(isStyled, 1);
                show();
            }
        }
        program {
            name: "reset";
            signal: "reset";
            script {
                set_int(isEnabled, 0);
                set_int(isPressed, 0);
                set_int(isFocused, 0);
                set_int(isStyled, 0);
                show();
            }
        }
    }
}
